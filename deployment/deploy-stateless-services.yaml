---
- name: deploy stateless services
  hosts: edc-connector-instances

  vars:
    horizontal_pod_autoscalers_state: "{{ 'present' if with_stateless_services_horizontal_pod_autoscalers else 'absent' }}"
    horizontal_pod_autoscalers_task_heading: "{{ 'deploy' if with_stateless_services_horizontal_pod_autoscalers else 'purge' }}"

  module_defaults:
    k8s:
      wait: true
      wait_timeout: "{{ k8s_wait_timeout }}"
      state: present
      namespace: "{{ k8s_namespace }}"

  tasks:
    - name: "deploy deployment/{{ application }}-connectorconsumer"
      when: "deploy_connector|bool"
      tags:
        - connector
        - connectorconsumer
        - deployment
      k8s:
        definition:
          apiVersion: v1
          kind: Deployment
          metadata:
            name: "{{ application }}-connectorconsumer"
            labels:
              component: connectorconsumer
              application: "{{ application }}"
          spec:
            progressDeadlineSeconds: "{{ progress_deadline_seconds }}"
            replicas: "{{ initial_replicas }}"
            strategy:
              type: RollingUpdate
            selector:
              matchLabels:
                component: connectorconsumer
                application: "{{ application }}"
            template:
              metadata:
                labels:
                  component: connectorconsumer
                  application: "{{ application }}"
                  image_tag: "{{ stateless_services_image_tag }}"
                  parameters_digest: "{{ (connectorconsumer_configmap_digest + connectorconsumer_secret_digest)|hash('sha1') }}"
              spec:
                serviceAccountName: "run-any-uid"
                ports:
                  - name: "api"
                    containerPort: 29191
                    protocol: "TCP"
                  - name: "management"
                    containerPort: 29193
                    protocol: "TCP"
                  - name: "protocol"
                    containerPort: 29194
                    protocol: "TCP"
                  - name: "public"
                    containerPort: 29291
                    protocol: "TCP"
                  - name: "control"
                    containerPort: 29192
                    protocol: "TCP"
                containers:
                  - name: "connectorconsumer"
                    image: "{{ registry_domain }}/{{ registry_project }}/{{ registry_application }}/connector:{{ stateless_services_image_tag }}"
                    imagePullPolicy: "{{ stateless_services_image_pull_policy }}"
                    securityContext:
                      readOnlyRootFilesystem: false
                      runAsNonRoot: true
                      runAsUser: 1000
                    resources: "{{ connectorconsumer_resources }}"
                    envFrom:
                      - configMapRef:
                          name: "{{ application }}-connectorconsumer"
                          optional: true
                      - secretRef:
                          name: "{{ application }}-connectorconsumer"
                          optional: true
                    volumeMounts:
                      - name: "connectorconsumer-tmp"
                        mountPath: "/tmp"
                volumes:
                  - name: "connectorconsumer-tmp"
                    emptyDir:
                      medium: "Memory"

    - name: "deploy service/{{ application }}-connectorconsumer"
      when: "deploy_connector"
      tags:
        - connector
        - connectorconsumer
        - service
      k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: "{{ application }}-connectorconsumer"
            labels:
              application: "{{ application }}"
              component: connectorconsumer
          spec:
            ports:
              - name: "api"
                port: 29191
              - name: "management"
                port: 29193
              - name: "protocol"
                port: 29194
              - name: "public"
                port: 29291
              - name: "control"
                port: 29192
            selector:
              application: "{{ application }}"
              component: connectorconsumer

    - name: "deploy configmap/{{ application }}-consumerdashboard"
      when: "deploy_datadashboard"
      tags:
        - consumerdashboard
        - configmap
      k8s:
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: "{{ application }}-consumerdashboard-config"
            labels:
              application: "{{ application }}"
          data:
            app.config.json: |
              {
                "apiKey": "fifi-info-zaneta",
                "managementApiUrl": "https://consumer-edc-connector.apps.paas-dev.psnc.pl/management",
                "catalogUrl": "https://federatedcatalog-edc-connector.apps.paas-dev.psnc.pl/catalog",
                "theme": "theme-3",
                "backendUrl": "https://consback-edc-connector.apps.paas-dev.psnc.pl/edr-endpoint"
              }
            nginx.conf: |
              events {}
              pid /tmp/nginx.pid;
              http {
                include /etc/nginx/mime.types;
                server {
                  listen 8080;
                  server_name consumer-dashboard-edc-connector.apps.paas-dev.psnc.pl;
                  root /usr/share/nginx/html;
                  index index.html;
                  access_log off;
                  location / {
                    try_files $uri $uri/ /index.html;
                  }
                  location /management {
                    proxy_pass https://consumer-edc-connector.apps.paas-dev.psnc.pl/management;
                  }
                  location /catalog {
                    proxy_pass https://federatedcatalog-edc-connector.apps.paas-dev.psnc.pl/catalog;
                  }
                }
              }

    - name: "deploy deployment/{{ application }}-consumerdashboard"
      when: "deploy_datadashboard|bool"
      tags:
        - consumerdashboard
        - deployment
      k8s:
        definition:
          apiVersion: v1
          kind: Deployment
          metadata:
            name: "{{ application }}-consumerdashboard"
            labels:
              component: consumerdashboard
              application: "{{ application }}"
          spec:
            progressDeadlineSeconds: "{{ progress_deadline_seconds }}"
            replicas: "{{ initial_replicas }}"
            strategy:
              type: RollingUpdate
            selector:
              matchLabels:
                component: consumerdashboard
                application: "{{ application }}"
            template:
              metadata:
                labels:
                  component: consumerdashboard
                  application: "{{ application }}"
                  image_tag: "{{ stateless_services_image_tag }}"
                  parameters_digest: "{{ (consumerdashboard_configmap_digest + consumerdashboard_secret_digest)|hash('sha1') }}"
              spec:
                serviceAccountName: "run-any-uid"
                ports:
                  - name: "www"
                    containerPort: 8080
                    protocol: "TCP"
                containers:
                  - name: "consumerdashboard"
                    image: "{{ registry_domain }}/{{ registry_project }}/{{ registry_application }}/data-dashboard:{{ stateless_services_image_tag }}"
                    imagePullPolicy: "{{ stateless_services_image_pull_policy }}"
                    securityContext:
                      readOnlyRootFilesystem: false
                      runAsNonRoot: true
                    # runAsUser: 1000
                    resources: "{{ consumerdashboard_resources }}"
                    envFrom:
                      - secretRef:
                          name: "{{ application }}-consumerdashboard"
                          optional: true
                      - configMapRef:
                          name: "{{ application }}-consumerdashboard-config"
                          optional: true
                    volumeMounts:
                      - name: "consumerdashboard-tmp"
                        mountPath: "/tmp"
                      - name: "consumerdashboard-nginx-config"
                        mountPath: "/etc/nginx/nginx.conf"
                        subPath: "nginx.conf"
                      - name: "consumerdashboard-app-config"
                        mountPath: "/usr/share/nginx/html/assets/config/app.config.json"
                        subPath: "app.config.json"
                volumes:
                  - name: "consumerdashboard-tmp"
                    emptyDir:
                      medium: "Memory"
                  - name: "consumerdashboard-nginx-config"
                    configMap:
                      name: "{{ application }}-consumerdashboard-config"
                  - name: "consumerdashboard-app-config"
                    configMap:
                      name: "{{ application }}-consumerdashboard-config"

    - name: "deploy service/{{ application }}-consumerdashboard"
      when: "deploy_datadashboard"
      tags:
        - consumerdashboard
        - service
      k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: "{{ application }}-consumerdashboard"
            labels:
              application: "{{ application }}"
              component: consumerdashboard
          spec:
            ports:
              - name: "www"
                port: 8080
            selector:
              application: "{{ application }}"
              component: consumerdashboard

    - name: "deploy deployment/{{ application }}-connectorprovider"
      when: "deploy_connector|bool"
      tags:
        - connector
        - connectorprovider
        - deployment
      k8s:
        definition:
          apiVersion: v1
          kind: Deployment
          metadata:
            name: "{{ application }}-connectorprovider"
            labels:
              component: connectorprovider
              application: "{{ application }}"
          spec:
            progressDeadlineSeconds: "{{ progress_deadline_seconds }}"
            replicas: "{{ initial_replicas }}"
            strategy:
              type: RollingUpdate
            selector:
              matchLabels:
                component: connectorprovider
                application: "{{ application }}"
            template:
              metadata:
                labels:
                  component: connectorprovider
                  application: "{{ application }}"
                  image_tag: "{{ stateless_services_image_tag }}"
                  parameters_digest: "{{ (connectorprovider_configmap_digest + connectorprovider_secret_digest)|hash('sha1') }}"
              spec:
                serviceAccountName: "run-any-uid"
                ports:
                  - name: "api"
                    containerPort: 19191
                    protocol: "TCP"
                  - name: "management"
                    containerPort: 19193
                    protocol: "TCP"
                  - name: "protocol"
                    containerPort: 19194
                    protocol: "TCP"
                  - name: "public"
                    containerPort: 19291
                    protocol: "TCP"
                  - name: "control"
                    containerPort: 19192
                    protocol: "TCP"
                containers:
                  - name: "connectorprovider"
                    image: "{{ registry_domain }}/{{ registry_project }}/{{ registry_application }}/connector:{{ stateless_services_image_tag }}"
                    imagePullPolicy: "{{ stateless_services_image_pull_policy }}"
                    securityContext:
                      readOnlyRootFilesystem: false
                      runAsNonRoot: true
                      runAsUser: 1000
                    resources: "{{ connectorprovider_resources }}"
                    envFrom:
                      - configMapRef:
                          name: "{{ application }}-connectorprovider"
                          optional: true
                      - secretRef:
                          name: "{{ application }}-connectorprovider"
                          optional: true
                    volumeMounts:
                      - name: "connectorprovider-tmp"
                        mountPath: "/tmp"
                volumes:
                  - name: "connectorprovider-tmp"
                    emptyDir:
                      medium: "Memory"

    - name: "deploy service/{{ application }}-connectorprovider"
      when: "deploy_connector"
      tags:
        - connector
        - connectorprovider
        - service
      k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: "{{ application }}-connectorprovider"
            labels:
              application: "{{ application }}"
              component: connectorprovider
          spec:
            ports:
              - name: "api"
                port: 19191
              - name: "management"
                port: 19193
              - name: "protocol"
                port: 19194
              - name: "public"
                port: 19291
              - name: "control"
                port: 19192
            selector:
              application: "{{ application }}"
              component: connectorprovider

    - name: "deploy configmap/{{ application }}-providerdashboard"
      when: "deploy_datadashboard"
      tags:
        - providerdashboard
        - configmap
      k8s:
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: "{{ application }}-providerdashboard-config"
            labels:
              application: "{{ application }}"
          data:
            app.config.json: |
              {
                "apiKey": "fifi-info-zaneta",
                "managementApiUrl": "https://provider-edc-connector.apps.paas-dev.psnc.pl/management",
                "catalogUrl": "https://federatedcatalog-edc-connector.apps.paas-dev.psnc.pl/catalog",
                "theme": "theme-2",
                "backendUrl": ""
              }
            nginx.conf: |
              events {}
              pid /tmp/nginx.pid;
              http {
                include /etc/nginx/mime.types;
                server {
                  listen 8080;
                  server_name provider-dashboard-edc-connector.apps.paas-dev.psnc.pl;
                  root /usr/share/nginx/html;
                  index index.html;
                  access_log off;
                  location / {
                    try_files $uri $uri/ /index.html;
                  }
                  location /management {
                    proxy_pass https://provider-edc-connector.apps.paas-dev.psnc.pl/management;
                  }
                  location /catalog {
                    proxy_pass https://federatedcatalog-edc-connector.apps.paas-dev.psnc.pl/catalog;
                  }
                }
              }

    - name: "deploy deployment/{{ application }}-providerdashboard"
      when: "deploy_datadashboard|bool"
      tags:
        -providerdashboard
        - deployment
      k8s:
        definition:
          apiVersion: v1
          kind: Deployment
          metadata:
            name: "{{ application }}-providerdashboard"
            labels:
              component: providerdashboard
              application: "{{ application }}"
          spec:
            progressDeadlineSeconds: "{{ progress_deadline_seconds }}"
            replicas: "{{ initial_replicas }}"
            strategy:
              type: RollingUpdate
            selector:
              matchLabels:
                component: providerdashboard
                application: "{{ application }}"
            template:
              metadata:
                labels:
                  component: providerdashboard
                  application: "{{ application }}"
                  image_tag: "{{ stateless_services_image_tag }}"
                  parameters_digest: "{{ (providerdashboard_configmap_digest + providerdashboard_secret_digest)|hash('sha1') }}"
              spec:
                serviceAccountName: "run-any-uid"
                ports:
                  - name: "www"
                    containerPort: 80
                    protocol: "TCP"
                containers:
                  - name: "providerdashboard"
                    image: "{{ registry_domain }}/{{ registry_project }}/{{ registry_application }}/data-dashboard:{{ stateless_services_image_tag }}"
                    imagePullPolicy: "{{ stateless_services_image_pull_policy }}"
                    securityContext:
                      readOnlyRootFilesystem: false
                      runAsNonRoot: true
                    # runAsUser: 1000
                    resources: "{{ providerdashboard_resources }}"
                    envFrom:
                      - secretRef:
                          name: "{{ application }}-providerdashboard"
                          optional: true
                      - configMapRef:
                          name: "{{ application }}-providerdashboard-config"
                          optional: true
                    volumeMounts:
                      - name: "providerdashboard-tmp"
                        mountPath: "/tmp"
                      - name: "providerdashboard-nginx-config"
                        mountPath: "/etc/nginx/nginx.conf"
                        subPath: "nginx.conf"
                      - name: "providerdashboard-app-config"
                        mountPath: "/usr/share/nginx/html/assets/config/app.config.json"
                        subPath: "app.config.json"
                volumes:
                  - name: "providerdashboard-tmp"
                    emptyDir:
                      medium: "Memory"
                  - name: "providerdashboard-nginx-config"
                    configMap:
                      name: "{{ application }}-providerdashboard-config"
                  - name: "providerdashboard-app-config"
                    configMap:
                      name: "{{ application }}-providerdashboard-config"

    - name: "deploy service/{{ application }}-providerdashboard"
      when: "deploy_datadashboard"
      tags:
        - providerdashboard
        - service
      k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: "{{ application }}-providerdashboard"
            labels:
              application: "{{ application }}"
              component: providerdashboard
          spec:
            ports:
              - name: "www"
                port: 8080
            selector:
              application: "{{ application }}"
              component: providerdashboard

    - name: "deploy deployment/{{ application }}-consback"
      when: "deploy_connector|bool"
      tags:
        - consback
        - deployment
      k8s:
        definition:
          apiVersion: v1
          kind: Deployment
          metadata:
            name: "{{ application }}-consback"
            labels:
              component: consback
              application: "{{ application }}"
          spec:
            progressDeadlineSeconds: "{{ progress_deadline_seconds }}"
            replicas: "{{ initial_replicas }}"
            strategy:
              type: RollingUpdate
            selector:
              matchLabels:
                component: consback
                application: "{{ application }}"
            template:
              metadata:
                labels:
                  component: consback
                  application: "{{ application }}"
                  image_tag: "{{ stateless_services_image_tag }}"
                  parameters_digest: "{{ (consback_configmap_digest + consback_secret_digest)|hash('sha1') }}"
              spec:
                serviceAccountName: "run-any-uid"
                ports:
                  - name: "receiver"
                    containerPort: 4000
                    protocol: "TCP"
                containers:
                  - name: "consback"
                    image: "{{ registry_domain }}/{{ registry_project }}/{{ registry_application }}/consumer-backend:{{ stateless_services_image_tag }}"
                    imagePullPolicy: "{{ stateless_services_image_pull_policy }}"
                    securityContext:
                      readOnlyRootFilesystem: false
                      runAsNonRoot: true
                      runAsUser: 1000
                    resources: "{{ consback_resources }}"
                    envFrom:
                      - configMapRef:
                          name: "{{ application }}-consback"
                          optional: true
                      - secretRef:
                          name: "{{ application }}-consback"
                          optional: true
                    volumeMounts:
                      - name: "consback-tmp"
                        mountPath: "/tmp"
                volumes:
                  - name: "consback-tmp"
                    emptyDir:
                      medium: "Memory"

    - name: "deploy service/{{ application }}-consback"
      when: "deploy_connector"
      tags:
        - consback
        - service
      k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: "{{ application }}-consback"
            labels:
              application: "{{ application }}"
              component: consback
          spec:
            ports:
              - name: "receiver"
                port: 4000
            selector:
              application: "{{ application }}"
              component: consback
          envFrom:
            - configMapRef:
                name: "{{ application }}-consback"
                optional: true
          env:
            - name: S3_STORAGE_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{ application }}-minio"
                  key: MINIO_ACCESS_KEY
            - name: S3_STORAGE_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{ application }}-minio"
                  key: MINIO_SECRET_KEY

    - name: "deploy deployment/{{ application }}-identityprovider"
      when: "deploy_identityprovider|bool"
      tags:
        - identityprovider
        - deployment
      k8s:
        definition:
          apiVersion: v1
          kind: Deployment
          metadata:
            name: "{{ application }}-identityprovider"
            labels:
              component: identityprovider
              application: "{{ application }}"
          spec:
            progressDeadlineSeconds: "{{ progress_deadline_seconds }}"
            replicas: "{{ initial_replicas }}"
            strategy:
              type: RollingUpdate
            selector:
              matchLabels:
                component: identityprovider
                application: "{{ application }}"
            template:
              metadata:
                labels:
                  component: identityprovider
                  application: "{{ application }}"
                  image_tag: "{{ stateless_services_image_tag }}"
                  parameters_digest: "{{ (identityprovider_configmap_digest + identityprovider_secret_digest)|hash('sha1') }}"
              spec:
                serviceAccountName: "run-any-uid"
                ports:
                  - name: "keycloak-https"
                    containerPort: 8443
                    protocol: "TCP"
                  - name: "keycloak-http"
                    containerPort: 8080
                    protocol: "TCP"

                containers:
                  - name: "identityprovider"
                    image: "{{ registry_domain }}/{{ registry_project }}/{{ registry_application }}/identity-provider:{{ stateless_services_image_tag }}"
                    imagePullPolicy: "{{ stateless_services_image_pull_policy }}"
                    securityContext:
                      readOnlyRootFilesystem: false
                      runAsNonRoot: true
                      runAsUser: 1000
                    resources: "{{ identityprovider_resources }}"
                    envFrom:
                      - configMapRef:
                          name: "{{ application }}-identityprovider"
                          optional: true
                      - secretRef:
                          name: "{{ application }}-identityprovider"
                          optional: true
                    volumeMounts:
                      - name: "identityprovider-tmp"
                        mountPath: "/tmp"
                volumes:
                  - name: "identityprovider-tmp"
                    emptyDir:
                      medium: "Memory"

    - name: "deploy service/{{ application }}-identityprovider"
      when: "deploy_identityprovider"
      tags:
        - identityprovider
        - service
      k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: "{{ application }}-identityprovider"
            labels:
              application: "{{ application }}"
              component: identityprovider
          spec:
            ports:
              - name: "keycloak-https"
                port: 8443
              - name: "keycloak-http"
                port: 8080
            selector:
              application: "{{ application }}"
              component: identityprovider
          envFrom:
            - configMapRef:
                name: "{{ application }}-identityprovider"
                optional: true
            - secretRef:
                name: "{{ application }}-identityprovider"
                optional: true

    - name: "deploy configmap/{{ application }}-federatedcatalog"
      when: "deploy_connector"
      tags:
        - federatedcatalog
        - configmap
      k8s:
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: "{{ application }}-federatedcatalog"
            labels:
              application: "{{ application }}"
          data:
            participants.json: |
              {
                "consumer": "https://consumer-edc-connector.apps.paas-dev.psnc.pl/protocol",
                "provider": "https://provider-edc-connector.apps.paas-dev.psnc.pl/protocol"
              }

    - name: "deploy deployment/{{ application }}-federatedcatalog"
      when: "deploy_connector|bool"
      tags:
        - federatedcatalog
        - deployment
      k8s:
        definition:
          apiVersion: v1
          kind: Deployment
          metadata:
            name: "{{ application }}-federatedcatalog"
            labels:
              component: federatedcatalog
              application: "{{ application }}"
          spec:
            progressDeadlineSeconds: "{{ progress_deadline_seconds }}"
            replicas: "{{ initial_replicas }}"
            strategy:
              type: RollingUpdate
            selector:
              matchLabels:
                component: federatedcatalog
                application: "{{ application }}"
            template:
              metadata:
                labels:
                  component: federatedcatalog
                  application: "{{ application }}"
                  image_tag: "{{ stateless_services_image_tag }}"
                  parameters_digest: "{{ (federatedcatalog_configmap_digest + federatedcatalog_secret_digest)|hash('sha1') }}"
              spec:
                serviceAccountName: "run-any-uid"
                ports:
                  - name: "api"
                    containerPort: 8080
                    protocol: "TCP"
                  - name: "catalog"
                    containerPort: 8181
                    protocol: "TCP"
                containers:
                  - name: "federatedcatalog"
                    image: "{{ registry_domain }}/{{ registry_project }}/{{ registry_application }}/federated-catalog:{{ stateless_services_image_tag }}"
                    imagePullPolicy: "{{ stateless_services_image_pull_policy }}"
                    securityContext:
                      readOnlyRootFilesystem: false
                      runAsNonRoot: true
                      runAsUser: 1000
                    resources: "{{ federatedcatalog_resources }}"
                    envFrom:
                      - configMapRef:
                          name: "{{ application }}-federatedcatalog"
                          optional: true
                    volumeMounts:
                      - name: "federatedcatalog-tmp"
                        mountPath: "/tmp"
                      - name: "federatedcatalog-participants-config"
                        mountPath: "/app/config/participants.json"
                        subPath: "participants.json"
                volumes:
                  - name: "federatedcatalog-tmp"
                    emptyDir:
                      medium: "Memory"
                  - name: "federatedcatalog-participants-config"
                    configMap:
                      name: "{{ application }}-federatedcatalog"

    - name: "deploy service/{{ application }}-federatedcatalog"
      when: "deploy_connector"
      tags:
        - federatedcatalog
        - service
      k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: "{{ application }}-federatedcatalog"
            labels:
              application: "{{ application }}"
              component: federatedcatalog
          spec:
            ports:
              - name: "api"
                port: 8080
              - name: "catalog"
                port: 8181
            selector:
              application: "{{ application }}"
              component: federatedcatalog
