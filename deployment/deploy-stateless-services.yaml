---
- name: deploy stateless services
  hosts: edc-connector-instances

  vars:
    horizontal_pod_autoscalers_state: "{{ 'present' if with_stateless_services_horizontal_pod_autoscalers else 'absent' }}"
    horizontal_pod_autoscalers_task_heading: "{{ 'deploy' if with_stateless_services_horizontal_pod_autoscalers else 'purge' }}"

  module_defaults:
    k8s:
      wait: true
      wait_timeout: "{{ k8s_wait_timeout }}"
      state: present
      namespace: "{{ k8s_namespace }}"

  tasks:
    - name: "fetch image_tag if undefined"
      # TODO DV-272 remove this or here
      when: image_tag is undefined or not image_tag
      include_tasks: "tasks/fetch-current-image-tag.yaml"

    - name: "deploy deployment/{{ application }}-django"
      tags:
        - django
        - deployment
      k8s:
        definition:
          apiVersion: v1
          kind: Deployment
          metadata:
            name: "{{ application }}-django"
            labels:
              application: "{{ application }}"
              component: django
          spec:
            progressDeadlineSeconds: "{{ progress_deadline_seconds }}"
            strategy:
              type: RollingUpdate
            selector:
              matchLabels:
                component: django
                application: "{{ application }}"
            template:
              metadata:
                labels:
                  component: django
                  application: "{{ application }}"
                  image_tag: "{{ stateless_services_image_tag }}"
                  parameters_digest: "{{ (django_configmap_digest + django_secret_digest + pgbouncer_configmap_digest + pgbouncer_secret_digest)|hash('sha1') }}"
              spec:
                affinity:
                  podAntiAffinity:
                    preferredDuringSchedulingIgnoredDuringExecution:
                      - weight: 50
                        podAffinityTerm:
                          labelSelector:
                            matchLabels:
                              component: django
                              application: "{{ application }}"
                          topologyKey: "kubernetes.io/hostname"
                containers:
                  - name: "django"
                    image: "{{ registry_domain }}/{{ registry_project }}/{{ registry_application }}/django:{{ stateless_services_image_tag }}"
                    imagePullPolicy: "{{ stateless_services_image_pull_policy }}"
                    securityContext:
                      readOnlyRootFilesystem: true
                      runAsNonRoot: true
                    resources: "{{ django_resources }}"
                    ports:
                      - name: "django-port"
                        containerPort: 9001
                        protocol: "TCP"
                    envFrom:
                      - configMapRef:
                          name: "{{ application }}-django"
                          optional: true
                      - secretRef:
                          name: "{{ application }}-django"
                          optional: true
                    env:
                      - name: ENABLE_SERVICES
                        value: uwsgi
                      # definitions DATABASE_HOST and DATABASE_PORT below
                      # override values typically passed from django configmap
                      # (those values are used by pgbouncer container)
                      - name: DATABASE_HOST
                        value: "localhost"
                      - name: DATABASE_PORT
                        value: "5433"
                    volumeMounts:
                      - name: "django-run"
                        mountPath: "/run"  # centos image that we are using, has symbolic link /var/run -> /run
                      - name: "django-tmp"
                        mountPath: "/tmp"
                    readinessProbe:
                      httpGet:
                        path: /_health/app/?readinessProbe&check=common.checks.django
                        httpHeaders:
                          - name: Host
                            value: "{{ MAIN_DOMAIN }}"
                        port: "django-port"
                      initialDelaySeconds: "{{ readiness_probe_initial_delay }}"
                      timeoutSeconds: "{{ readiness_probe_timeout }}"
                      periodSeconds: "{{ readiness_probe_period }}"
                    livenessProbe:
                      httpGet:
                        path: /_health/app/?livenessProbe&check=common.checks.django
                        httpHeaders:
                          - name: Host
                            value: "{{ MAIN_DOMAIN }}"
                        port: "django-port"
                      initialDelaySeconds: "{{ liveness_probe_initial_delay }}"
                      timeoutSeconds: "{{ liveness_probe_timeout }}"
                      periodSeconds: "{{ liveness_probe_period }}"
                  - name: "pgbouncer"
                    image: "{{ registry_domain }}/{{ registry_project }}/{{ registry_application }}/pgbouncer:{{ image_tag }}"
                    imagePullPolicy: "{{ stateless_services_image_pull_policy }}"
                    securityContext:
                      readOnlyRootFilesystem: true
                      runAsNonRoot: true
                    resources: "{{ pgbouncer_resources }}"
                    envFrom:
                      - configMapRef:
                          name: "{{ application }}-pgbouncer"
                          optional: true
                      - secretRef:
                          name: "{{ application }}-pgbouncer"
                          optional: true
                    env:
                      - name: LISTEN_PORT
                        value: "5433"
                      - name: POOL_MODE
                        value: "transaction"
                      - name: DB_USER
                        valueFrom:
                          secretKeyRef:
                            name: "{{ application }}-django"
                            key: DATABASE_USER
                      - name: DB_PASSWORD
                        valueFrom:
                          secretKeyRef:
                            name: "{{ application }}-django"
                            key: DATABASE_PASS
                      - name: DB_HOST
                        valueFrom:
                          configMapKeyRef:
                            name: "{{ application }}-django"
                            key: DATABASE_HOST
                      - name: DB_PORT
                        valueFrom:
                          configMapKeyRef:
                            name: "{{ application }}-django"
                            key: DATABASE_PORT
                      - name: DB_NAME
                        valueFrom:
                          configMapKeyRef:
                            name: "{{ application }}-django"
                            key: DATABASE_NAME
                    volumeMounts:
                      - name: "pgbouncer-var"
                        mountPath: "/var/lib/pgbouncer"
                volumes:
                  - name: "django-run"
                    emptyDir:
                      medium: "Memory"
                  - name: "django-tmp"
                    emptyDir:
                      medium: "Memory"
                  - name: "pgbouncer-var"
                    emptyDir:
                      medium: "Memory"

    - name: "{{ horizontal_pod_autoscalers_task_heading }} hpa/{{ application }}-django"
      tags:
        - django
        - hpa
      vars:
        component: django
        autoscaler: "{{ django_autoscaler }}"
      k8s:
        state: "{{ horizontal_pod_autoscalers_state }}"
        definition: "{{ lookup('template', 'horizontal-pod-autoscaler-definition.yaml') }}"

    - name: "deploy deployment/{{ application }}-django static replicas count (no hpa)"
      when: "not with_stateless_services_horizontal_pod_autoscalers"
      tags:
        - django
        - deployment
      k8s:
        definition:
          apiVersion: v1
          kind: Deployment
          metadata:
            name: "{{ application }}-django"
          spec:
            replicas: "{{ initial_replicas }}"

    - name: "deploy service/{{ application }}-django"
      tags:
        - django
        - service
      k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: "{{ application }}-django"
            labels:
              application: "{{ application }}"
              component: django
          spec:
            ports:
            - port: 9001
              name: django
            selector:
              application: "{{ application }}"
              component: django
            type: ClusterIP

    - name: "deploy deployment/{{ application }}-varnish"
      tags:
        - varnish
        - deployment
      k8s:
        definition:
          apiVersion: v1
          kind: Deployment
          metadata:
            name: "{{ application }}-varnish"
            labels:
              application: "{{ application }}"
              component: varnish
          spec:
            progressDeadlineSeconds: "{{ progress_deadline_seconds }}"
            strategy:
              type: RollingUpdate
            selector:
              matchLabels:
                application: "{{ application }}"
                component: varnish
            template:
              metadata:
                labels:
                  application: "{{ application }}"
                  component: varnish
                  image_tag: "{{ stateless_services_image_tag }}"
                  parameters_digest: "{{ (varnish_configmap_digest + varnish_secret_digest)|hash('sha1') }}"
              spec:
                affinity:
                  podAntiAffinity:
                    preferredDuringSchedulingIgnoredDuringExecution:
                      - weight: 50
                        podAffinityTerm:
                          labelSelector:
                            matchLabels:
                              component: varnish
                              application: "{{ application }}"
                          topologyKey: "kubernetes.io/hostname"
                containers:
                  - name: "varnish"
                    image: "{{ registry_domain }}/{{ registry_project }}/{{ registry_application }}/varnish:{{ stateless_services_image_tag }}"
                    imagePullPolicy: "{{ stateless_services_image_pull_policy }}"
                    securityContext:
                      readOnlyRootFilesystem: true
                      runAsNonRoot: true
                    resources: "{{ varnish_resources }}"
                    ports:
                      - name: "varnish-port"
                        containerPort: 9002
                        protocol: "TCP"
                    envFrom:
                      - configMapRef:
                          name: "{{ application }}-varnish"
                          optional: true
                      - secretRef:
                          name: "{{ application }}-varnish"
                          optional: true
                    volumeMounts:
                      - name: "varnish-data"
                        mountPath: "/var/lib/varnish"
                      - name: "varnish-run"
                        mountPath: "/run"
                      - name: "varnish-tmp"
                        mountPath: "/tmp"
                    readinessProbe:
                      httpGet:
                        path: /_health/cache?readinessProbe
                        httpHeaders:
                          - name: Host
                            value: "{{ MAIN_DOMAIN }}"
                        port: "varnish-port"
                      initialDelaySeconds: "{{ readiness_probe_initial_delay }}"
                      timeoutSeconds: "{{ readiness_probe_timeout }}"
                      periodSeconds: "{{ readiness_probe_period }}"
                    livenessProbe:
                      httpGet:
                        path: /_health/cache?livenessProbe
                        httpHeaders:
                          - name: Host
                            value: "{{ MAIN_DOMAIN }}"
                        port: "varnish-port"
                      initialDelaySeconds: "{{ liveness_probe_initial_delay }}"
                      timeoutSeconds: "{{ liveness_probe_timeout }}"
                      periodSeconds: "{{ liveness_probe_period }}"
                volumes:
                  - name: "varnish-data"
                    emptyDir:
                      medium: "Memory"
                  - name: "varnish-run"
                    emptyDir:
                      medium: "Memory"
                  - name: "varnish-tmp"
                    emptyDir:
                      medium: "Memory"

    - name: "{{ horizontal_pod_autoscalers_task_heading }} hpa/{{ application }}-varnish"
      tags:
        - varnish
        - hpa
      vars:
        component: varnish
        autoscaler: "{{ varnish_autoscaler }}"
      k8s:
        state: "{{ horizontal_pod_autoscalers_state }}"
        definition: "{{ lookup('template', 'horizontal-pod-autoscaler-definition.yaml') }}"

    - name: "deploy deployment/{{ application }}-varnish static replicas count (no hpa)"
      when: "not with_stateless_services_horizontal_pod_autoscalers"
      tags:
        - varnish
        - deployment
      k8s:
        definition:
          apiVersion: v1
          kind: Deployment
          metadata:
            name: "{{ application }}-varnish"
          spec:
            replicas: "{{ initial_replicas }}"

    - name: "deploy service/{{ application }}-varnish"
      tags:
        - varnish
        - service
      k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: "{{ application }}-varnish"
            labels:
              application: "{{ application }}"
              component: varnish
          spec:
            ports:
            - port: 9002
              name: varnish
            selector:
              application: "{{ application }}"
              component: varnish
            type: ClusterIP


    - name: "deploy deployment/{{ application }}-connector"
      when: "deploy_connector|bool"
      tags:
        - connector
        - deployment
      k8s:
        definition:
          apiVersion: v1
          kind: Deployment
          metadata:
            name: "{{ application }}-connector"
            labels:
              component: connector
              application: "{{ application }}"
          spec:
            progressDeadlineSeconds: "{{ progress_deadline_seconds }}"
            replicas: 1
            strategy:
              type: RollingUpdate
            selector:
              matchLabels:
                component: connector
                application: "{{ application }}"
            template:
              metadata:
                labels:
                  component: connector
                  application: "{{ application }}"
                  image_tag: "{{ stateless_services_image_tag }}"
                  parameters_digest: "{{ (connector_configmap_digest + connector_secret_digest)|hash('sha1') }}"
              spec:
                serviceAccountName: "run-any-uid"
                ports:
                  - name: "api"
                    containerPort: 29191
                    protocol: "TCP"
                  - name: "management"
                    containerPort: 29193
                    protocol: "TCP"
                  - name: "protocol"
                    containerPort: 29194
                    protocol: "TCP"
                  - name: "public"
                    containerPort: 29291
                    protocol: "TCP"
                  - name: "control"
                    containerPort: 29192
                    protocol: "TCP"
                containers:
                  - name: "connector"
                    image: "{{ registry_domain }}/{{ registry_project }}/{{ registry_application }}/connector:{{ stateless_services_image_tag }}"
                    imagePullPolicy: "{{ stateless_services_image_pull_policy }}"
                    securityContext:
                      readOnlyRootFilesystem: false
                      runAsNonRoot: false
#                      runAsUser: 1000
                    resources: "{{ connector_resources }}"
                    envFrom:
                      - configMapRef:
                          name: "{{ application }}-connector"
                          optional: true
                      - secretRef:
                          name: "{{ application }}-connector"
                          optional: true
                    volumeMounts:
                      - name: "connector-tmp"
                        mountPath: "/tmp"
                volumes:
                  - name: "connector-tmp"
                    emptyDir:
                      medium: "Memory"

    - name: "deploy service/{{ application }}-connector"
      when: "deploy_connector"
      tags:
        - connector
        - service
      k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: "{{ application }}-connector"
            labels:
              application: "{{ application }}"
              component: connector
          spec:
            ports:
              - name: "api"
                port: 29191
              - name: "management"
                port: 29193
              - name: "protocol"
                port: 29194
              - name: "public"
                port: 29291
              - name: "control"
                port: 29192
            selector:
              application: "{{ application }}"
              component: connector

#    - name: "deploy {{ application }} {{ expose_http_kind }}"
#      when: "expose_http_kind != 'none'"
#      tags:
#        - routes
#      vars:
#        expose_http_ip_whitelist: "0.0.0.0/0"
#        expose_http_paths:
#          - path: "/api/"
#            serviceName: "{{ application }}-varnish"
#            servicePort: varnish
#      k8s:
#        definition: "{{ lookup('template', 'expose-http-definitions.yaml', convert_data=True)|from_yaml }}"
