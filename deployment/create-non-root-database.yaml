---
- name: create non-root database and non-root user
  hosts: edc-connector-instances

  tasks:

    - name: "check non-root user connectivity to non-root database"
      import_tasks: "manage.yaml"
      vars:
        command_description: "check non-root user connectivity to non-root database"
        command: >
          bash -c "export {{ django_direct_connection_environment_variables }} && (echo 'select now();' | manage dbshell >/dev/null 2>&1)"
        changed_when_never: true
      ignore_errors: true
      # best found way to maximally hide the failure output
      no_log: true

    - name: "saving need for non-root database creation"
      set_fact:
        need_database_initial_setup: "{{ last_manage_result.rc != 0 }}"

    - when: "need_database_initial_setup and create_non_root_database"
      block:

        - name: "create non-root database"
          import_tasks: "manage.yaml"
          vars:
            command_description: "create non-root database"
            command: >
              bash -c "export {{ postgres_admin_connection_environment_variables }} && (psql -tc \"SELECT 1 FROM pg_database where datname = '{{ django_configmap_data.DATABASE_NAME }}'\" | (grep -q 1 && echo database already exists) || (psql -c 'CREATE DATABASE {{ django_configmap_data.DATABASE_NAME }};' && echo database created))"
            changed_when_missing_from_stdout: "already exists"

        - name: "create non-root user"
          import_tasks: "manage.yaml"
          vars:
            command_description: "create non-root user"
            command: >
              bash -c "export {{ postgres_admin_connection_environment_variables }} && (psql -tc \"SELECT 1 FROM pg_shadow where usename = '{{ django_secret_data.DATABASE_USER }}'\" | (grep -q 1 && echo user already exists) || (psql -c \"CREATE USER {{ django_secret_data.DATABASE_USER }} WITH PASSWORD '{{ django_secret_data.DATABASE_PASS }}';\" && echo user created))"
            changed_when_missing_from_stdout: "already exists"

        - name: "grant non-root user access to non-root database"
          import_tasks: "manage.yaml"
          vars:
            command_description: "grant non-root user access to non-root database"
            command: >
              bash -c "export {{ postgres_admin_connection_environment_variables }} && (psql -c \"GRANT ALL ON DATABASE {{ django_configmap_data.DATABASE_NAME }} TO {{ django_secret_data.DATABASE_USER }};\")"

        - name: "check non-root user connectivity to non-root database again after creation"
          import_tasks: "manage.yaml"
          vars:
            command_description: "check non-root user connectivity to non-root database again after creation"
            command: >
              bash -c "export {{ django_direct_connection_environment_variables }} && (echo 'select now();' | manage dbshell)"
            changed_when_never: true
