version: '3.8'

services:
  providerpostgres:
    image: docker.io/bitnami/postgresql:11
    restart: always
    environment:
      POSTGRESQL_USERNAME: edc
      POSTGRESQL_PASSWORD: edc
      POSTGRESQL_DATABASE: edc
    ports:
      - '5432:5432'
    volumes:
      - 'postgresql-provider:/bitnami/postgresql'

  consumerpostgres:
    image: docker.io/bitnami/postgresql:11
    restart: always
    environment:
      POSTGRESQL_USERNAME: edc
      POSTGRESQL_PASSWORD: edc
      POSTGRESQL_DATABASE: edc
    ports:
      - '5433:5432'
    volumes:
      - 'postgresql-consumer:/bitnami/postgresql'

  #  consumerpostgres:
  #    restart: unless-stopped
  #    image: ${REGISTRY_DOMAIN}/${REGISTRY_PROJECT}/${REGISTRY_APPLICATION}/postgres:${IMAGE_TAG}
  #    read_only: true
  #    user: "999"  # postgres user
  #    environment:
  #      - POSTGRES_PASSWORD=edc
  #      - POSTGRES_USER=edc
  #      - POSTGRES_DB=edc
  #    expose:
  #      - "5432"
  #    tmpfs:
  #      - "/run/postgresql"
  #      - "/tmp"
  #  
  #  providerpostgres:
  #    restart: unless-stopped
  #    image: ${REGISTRY_DOMAIN}/${REGISTRY_PROJECT}/${REGISTRY_APPLICATION}/postgres:${IMAGE_TAG}
  #    read_only: true
  #    user: "999"  # postgres user
  #    environment:
  #      - POSTGRES_PASSWORD=edc
  #      - POSTGRES_USER=edc
  #      - POSTGRES_DB=edc
  #    expose:
  #      - "5432"
  #    tmpfs:
  #      - "/run/postgresql"
  #      - "/tmp"

  connectorconsumer:
    image: ${REGISTRY_DOMAIN}/${REGISTRY_PROJECT}/${REGISTRY_APPLICATION}/connector:${IMAGE_TAG}
    ports:
      - "29191:29191"
      - "29193:29193"
      - "29194:29194"
      - "29291:29291"
      - "29192:29192"
    volumes:
      - ../docker/connector/config/configuration-consumer.properties:/app/configuration.properties:ro
      - ../docker/connector/config/keystore.pfx:/app/keystore.pfx:ro
      - ../docker/connector/config/fs-consumer.vault:/app/fs.vault
    environment:
      JVM_ARGS: ""
      SERVICE_HOST: "https://connectorconsumer"
      EDC_IDS_ID: "urn:connectorconsumer:psnc"
      EDC_PARTICIPANT_ID: "psnc"
      EDC_DSP_CALLBACK_ADDRESS: "https://connectorconsumer:29194/protocol"
      WEB_HTTP_PORT: "29191"
      WEB_HTTP_PATH: "/api"
      WEB_HTTP_MANAGEMENT_PORT: "29193"
      WEB_HTTP_MANAGEMENT_PATH: "/management"
      WEB_HTTP_PROTOCOL_PORT: "29194"
      WEB_HTTP_PROTOCOL_PATH: "/protocol"
      WEB_HTTP_PUBLIC_PORT: "29291"
      WEB_HTTP_PUBLIC_PATH: "/public"
      WEB_HTTP_CONTROL_PORT: "29192"
      WEB_HTTP_CONTROL_PATH: "/control"
      EDC_RECEIVER_HTTP_ENDPOINT: "https://consback:4000/edr-endpoint"
      EDC_DATAPLANE_TOKEN_VALIDATION_ENDPOINT: "https://localhost:19192/control/token"
      EDC_PUBLIC_KEY_ALIAS: "public-key"
      EDC_TRANSFER_PROXY_TOKEN_SIGNER_PRIVATEKEY_ALIAS: "1"
      EDC_TRANSFER_PROXY_TOKEN_VERIFIER_PUBLICKEY_ALIAS: "public-key"
      EDC_KEYSTORE: "/app/certs/cert.pfx"
      EDC_VAULT: "/app/config/fs-consumer.vault"
      EDC_WEB_REST_CORS_ENABLED: "true"
      EDC_WEB_REST_CORS_HEADERS: origin,content-type,accept,authorization,x-api-key
      EDC_FEDERATED_NODE_URL: https://connectorprovider:19194/protocol
      EDC_FS_CONFIG: /app/configuration.properties
      EDC_API_AUTH_KEY: "fifi-info-zaneta"
    user: "1000:1000"
 
  consumerdashboard:
    image: ${REGISTRY_DOMAIN}/${REGISTRY_PROJECT}/${REGISTRY_APPLICATION}/data-dashboard:${IMAGE_TAG}
    ports:
      - "28080:80"
    volumes:
      - ../src/data-dashboard/deployment/conf-consumer/consumer.nginx.conf:/etc/nginx/nginx.conf
      - ../src/data-dashboard/deployment/conf-consumer/consumer.config.json:/usr/share/nginx/html/assets/config/app.config.json
    user: "1000:1000"

  connectorprovider:
    image: ${REGISTRY_DOMAIN}/${REGISTRY_PROJECT}/${REGISTRY_APPLICATION}/connector:${IMAGE_TAG}
    ports:
      - "19191:19191"
      - "19193:19193"
      - "19194:19194"
      - "19291:19291"
      - "19192:19192"
    volumes:
      - ../docker/connector/config/configuration-provider.properties:/app/configuration.properties:ro
      - ../docker/connector/config/keystore.pfx:/app/keystore.pfx:ro
      - ../docker/connector/config/fs-provider.vault:/app/fs.vault
      - ../docker/connector/config/api_collection.json:/app/api_collection.json
      - ../docker/connector/config/json_example.json:/app/json_example.json
    environment:
      JVM_ARGS: ""
      SERVICE_HOST: "https://connectorprovider"
      EDC_IDS_ID: "urn:connectorprovider:psnc"
      EDC_PARTICIPANT_ID: "psnc"
      EDC_DSP_CALLBACK_ADDRESS: "http://connectorprovider:19194/protocol"
      WEB_HTTP_PORT: "19191"
      WEB_HTTP_PATH: "/api"
      WEB_HTTP_MANAGEMENT_PORT: "19193"
      WEB_HTTP_MANAGEMENT_PATH: "/management"
      WEB_HTTP_PROTOCOL_PORT: "19194"
      WEB_HTTP_PROTOCOL_PATH: "/protocol"
      WEB_HTTP_PUBLIC_PORT: "19291"
      WEB_HTTP_PUBLIC_PATH: "/public"
      WEB_HTTP_CONTROL_PORT: "19192"
      WEB_HTTP_CONTROL_PATH: "/control"
      EDC_RECEIVER_HTTP_ENDPOINT: "https://consback:4000/edr-endpoint"
      EDC_DATAPLANE_TOKEN_VALIDATION_ENDPOINT: "https://localhost:19192/control/token"
      EDC_PUBLIC_KEY_ALIAS: "public-key"
      EDC_TRANSFER_PROXY_TOKEN_SIGNER_PRIVATEKEY_ALIAS: "1"
      EDC_TRANSFER_PROXY_TOKEN_VERIFIER_PUBLICKEY_ALIAS: "public-key"
      EDC_KEYSTORE: "/app/certs/cert.pfx"
      EDC_VAULT: "/app/config/fs-provider.vault"
      EDC_WEB_REST_CORS_ENABLED: "true"
      EDC_WEB_REST_CORS_HEADERS: origin,content-type,accept,authorization,x-api-key
      EDC_FEDERATED_NODE_URL: "https://connectorprovider:19194/protocol"
      EDC_FS_CONFIG: /app/configuration.properties
      EDC_API_AUTH_KEY: "fifi-info-zaneta"
    user: "1000:1000"
 
  providerdashboard:
    image: ${REGISTRY_DOMAIN}/${REGISTRY_PROJECT}/${REGISTRY_APPLICATION}/data-dashboard:${IMAGE_TAG}
    ports:
      - "18080:80"
    volumes:
      - ../src/data-dashboard/deployment/conf-provider/provider.nginx.conf:/etc/nginx/nginx.conf
      - ../src/data-dashboard/deployment/conf-provider/provider.config.json:/usr/share/nginx/html/assets/config/app.config.json
    #   user: "1000"

  consback:
    image: ${REGISTRY_DOMAIN}/${REGISTRY_PROJECT}/${REGISTRY_APPLICATION}/consumer-backend:${IMAGE_TAG}
    ports:
      - "4000:4000"
    environment:
      MINIO_ENDPOINT: "minio"
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio 

  minio:
    image: ${REGISTRY_DOMAIN}/${REGISTRY_PROJECT}/${REGISTRY_APPLICATION}/minio:${IMAGE_TAG}
    command: server /data
    environment:
      - HOSTNAME=minio
      - MINIO_ACCESS_KEY=minio-user
      - MINIO_SECRET_KEY=minio-password
    expose:
      - "9000"
    restart: unless-stopped

volumes:
  postgresql-provider:
    driver: local
  postgresql-consumer:
    driver: local
