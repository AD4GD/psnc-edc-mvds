default:
  image: registry.paas.psnc.pl/devlab/gitlab-runner:v1

variables:
  GIT_STRATEGY: clone

stages:
  # - precommit
  # - build
  - test
  # - upload
  - update_inventory

# Run pre-commit check:
#   stage: precommit
#   script:
#     - devlab_run_pre_commit 2500
#   artifacts:
#     paths:
#       - ./reports

# Build images:
#   stage: build
#   variables:
#     ULIMIT_NOFILE: "16384:16384"
#   script:
#     - devlab_build_images

# Upload images:
#   stage: upload
#   script:
#     - devlab_push_images

Update inventory for main project:
  stage: update_inventory
  variables:
    inventory_repository_name: inventory
    inventory_hostname: $inventory_hostname_psnc
    gitlab_push_token: $gitlab_push_token_dev
  script:
    - devlab_update_inventory
  only:
    variables:
      - $CI_COMMIT_BRANCH == $branch_allowed_to_update_inventory

Update inventory for atos-psnc integration:
  stage: update_inventory
  variables:
    inventory_repository_name: atos-integration-inventory
    inventory_hostname: $inventory_hostname_psnc_atos
    gitlab_push_token: $gitlab_push_token_psnc_atos
  script:
    - devlab_update_inventory
  only:
    variables:
      - $CI_COMMIT_BRANCH == $branch_allowed_to_update_inventory_atos_psnc

integration-test:
  stage: test
  image: docker:latest
  services:
    - docker:dind
  variables:
    CI_IMAGE_TAG: $CI_IMAGE_TAG
    CI_PROJECT_DIR: $CI_REPO_DIR
    CI_REGISTRY_DOMAIN: $CI_REGISTRY_DOMAIN
  before_script:
    - apk update
    - apk add --no-cache make curl jq
  script:
    - cd ${CI_PROJECT_DIR}/docker
    - make build clean
    # Utwórz volume (jeśli nie istnieje)
    - docker volume create consumer_daps_jks
    # - docker volume create provider_daps_jks
    # Skopiuj plik do volume przez tymczasowy kontener
    - ls -l $PWD/connector/certs
    - docker run --rm -v consumer_daps_jks:/target -v $PWD/connector/certs:/from busybox cp -a /from/consumer-daps.jks /target/consumer-daps.jks
    - docker run --rm -v provider_daps_jks:/target -v $PWD/connector/certs:/from busybox cp -a /from/provider-daps.jks /target/provider-daps.jks
    # - docker run --rm -v federated_catalog_daps_jks:/target -v $PWD/federated-catalog/certs:/from busybox cp -a /from/federated-catalog-daps.jks /target/federated-catalog-daps.jks
    - ls -l $PWD/registration-service-frontend/config
    - docker run --rm -v registration_frontend_nginx:/target -v $PWD/registration-service-frontend/config:/from busybox cp -a /from/app.nginx.conf /target/nginx.conf
    - docker run --rm -v registration_frontend_config:/target -v $PWD/registration-service-frontend/config:/from busybox cp -a /from/app.config.json /target/app.config.json
    - cd ${CI_PROJECT_DIR}/bin
    - ./devtests up -d
    - ./tests
    - docker compose -f ${CI_PROJECT_DIR}/compose/base.yaml logs > ${CI_PROJECT_DIR}/docker-compose.log
    - docker compose -f ${CI_PROJECT_DIR}/compose/base.yaml down
  artifacts:
    when: always
    paths:
      - ${CI_PROJECT_DIR}/docker-compose.log
