#!/bin/sh
set -e

# URLs
LOCALHOST="http://localhost"
PROVIDER_API="$LOCALHOST:19191/api"
PROVIDER_MANAGEMENT="$LOCALHOST:19193/management"
CONSUMER_API="$LOCALHOST:29191/api"
CONSUMER_MANAGEMENT="$LOCALHOST:29193/management"
FEDERATED_CATALOG_URL="$LOCALHOST:9181/catalog"
CONSUMER_BACKEND_EDR="$LOCALHOST:4000/edr-endpoint"
PROVIDER_PROTOCOL_INTERNAL="http://provider-connector:19194/protocol"

# Default headers
# HEADERS="-H 'Content-Type: application/json' -H 'x-api-key: edc'"
HEADERS="-H x-api-key:edc -H Content-Type:application/json"
RETURN_CODE='--write-out %{http_code}\n -o /dev/null'

# 1. Conn Check
echo "=== Conn Check ==="
# curl -s -X GET $RETURN_CODE "${HEADERS[@]}" "${PROVIDER_API}/check/health/"
if [[ $(curl -s -X GET $HEADERS $RETURN_CODE "${PROVIDER_API}/check/health/") -ne 200 ]]; then
	echo "[ERROR] Provider API is not reachable!"
	exit 1
else
	echo "Provider API is reachable."
fi
if [[ $(curl -s -X GET $RETURN_CODE $HEADERS "${CONSUMER_API}/check/health/") -ne 200 ]]; then
	echo "[ERROR] Consumer API is not reachable!"
	exit 1
else
	echo "Consumer API is reachable."
fi

# IDs
ASSET_ID="test-asset"
POLICY_ID="test-policy"
CONTRACT_DEF_ID="test-contract-definition"

# 2. Asset upload
echo "=== Add asset ==="
ASSET_PAYLOAD=$(jq -n \
	--arg id "$ASSET_ID" \
	--arg properties_name "$ASSET_ID" \
	--arg properties_contenttype "application/json" \
	'{
		"@context" : { "edc" : "https://w3id.org/edc/v0.0.1/ns/" },
		"@id" : $id,
		"properties" : {
			"name" : $properties_name,
			"contenttype" : $properties_contenttype
		},
		"private_properties" : {
			"name" : $properties_name,
			"contenttype" : $properties_contenttype
		},
		"dataAddress" : {
			"type" : "HttpData",
			"name" : "Test data",
			"baseUrl" : "https://jsonplaceholder.typicode.com/users"
		},
	}')
ASSET_RES=$(curl -s -X POST $RETURN_CODE $HEADERS "$PROVIDER_MANAGEMENT/v3/assets" -d "$ASSET_PAYLOAD")

if [[ $ASSET_RES -eq 200 ]] || [[ $ASSET_RES -eq 409 ]] ; then
	echo "=== Asset added successfully ==="
	echo $ASSET_RES
else
	echo "[ERROR] Unable to add asset! Response code: $ASSET_RES"
	exit 1
fi

# 3. Policy addition
echo "=== Add policy ==="
POLICY_PAYLOAD=$(jq -n \
	--arg id "$POLICY_ID" \
	'{
		"@context": {
			"edc" : "https://w3id.org/edc/v0.0.1/ns/",
			"odrl" : "http://www.w3.org/ns/odrl/2/",
		},
		"@id" : $id,
		"policy" : {
			"@context" : "http://www.w3.org/ns/odrl.jsonld",
			"@type" : "Set",
			"odrl:permission": [],
			"odrl:prohibition": [],
			"odrl:obligation": [],
		},
	}')
POLICY_RES=$(curl -s -X POST $RETURN_CODE $HEADERS "${PROVIDER_MANAGEMENT}/v2/policydefinitions" -d "$POLICY_PAYLOAD")
if [[ $POLICY_RES -eq 200 ]] || [[ $POLICY_RES -eq 409 ]] ; then
	echo "=== Policy added successfully ==="
	echo $POLICY_RES
else
	echo "[ERROR] Unable to add asset! Response code: $POLICY_RES"
	exit 1
fi
# 4. Contract definition addition
echo "=== Add contract definition ==="
CONTRACT_DEF_PAYLOAD=$(jq -n \
	--arg cdef_id "$CONTRACT_DEF_ID" \
	--arg policy_id "$POLICY_ID" \
	--arg asset_id "$ASSET_ID" \
	--arg edc_context "https://w3id.org/edc/v0.0.1/ns/" \
	--arg operandLeft "https://w3id.org/edc/v0.0.1/ns/id" \
	'{
		"@context" : { "edc" : "https://w3id.org/edc/v0.0.1/ns/" },
		"@id" : $cdef_id,
		"accessPolicyId" : $policy_id,
		"contractPolicyId" : $policy_id,
		"assetsSelector" : [
			{
				"operandLeft" : "https://w3id.org/edc/v0.0.1/ns/id",
				"operator": "in",
				"operandRight": [$asset_id]
			}
		],
	}')
CDEF_RES=$(curl -s -X POST $RETURN_CODE $HEADERS "$PROVIDER_MANAGEMENT/v2/contractdefinitions" -d "$CONTRACT_DEF_PAYLOAD")
if [[ $CDEF_RES -eq 200 ]] || [[ $CDEF_RES -eq 409 ]] ; then
	echo "=== Contract definition added successfully ==="
	echo $CDEF_RES
else
	echo "[ERROR] Unable to add asset! Response code: $CDEF_RES"
	exit 1
fi

# Wait for catalog to update
echo "=== Waiting for catalog to update ==="
if [[ $CDEF_RES -eq 200 ]] ; then
    sleep 60
elif [[ $CDEF_RES -eq 409 ]] ; then
	sleep 1
fi

# 5. Pobranie katalogu
echo "=== Fetch catalog ==="
CATALOG=$(curl -X POST $HEADERS "$FEDERATED_CATALOG_URL/v1alpha/catalog/query")
if [ ${#CATALOG[@]} -eq 0 ]; then
    echo "Error: Catalog is empty!"
	exit 1
fi

# Extract offer_id for given asset_id
OFFER_ID=$(printf '%s' "$CATALOG" | jq -r --arg asset_id "$ASSET_ID" '
  .[]
  | select(."@type" == "dcat:Catalog")
  | .["dcat:dataset"] as $ds
  | ($ds | type) as $dstype
  | if $dstype == "array" then $ds[]? else $ds end
  | select(.id == $asset_id)
  | ."odrl:hasPolicy"."@id"
')

if [[ -z "$OFFER_ID" ]]; then
	echo "[ERROR] Unable to retrieve offer ID!"
	exit 1
else
	echo "Offer: $OFFER_ID"
fi

# 7. Contract negotiation
echo "=== Negotiate contract ==="
NEGOTIATION_PAYLOAD=$(jq -n \
	--arg offer_id "$OFFER_ID" \
	--arg provider_protocol_internal "$PROVIDER_PROTOCOL_INTERNAL" \
	--argjson permissions [] \
'{
	"@context": { "edc" : "https://w3id.org/edc/v0.0.1/ns/" },
	"@type" : "ContractRequest",
	"counterPartyAddress" : $provider_protocol_internal,
	"protocol" : "dataspace-protocol-http",
	"policy" : {
		"@context" : "http://www.w3.org/ns/odrl.jsonld",
		"@id" : $offer_id,
		"@type" : "Offer",
		"assigner" : "provider",
		"target" : "assetId",
		"permission" : $permissions,
	},
}')
NEGOTIATION=$(curl -s -X POST $HEADERS "${CONSUMER_MANAGEMENT}/v3/contractnegotiations" -d "$NEGOTIATION_PAYLOAD")

NEGOTIATION_ID=$(echo "$NEGOTIATION" | jq -r '.["@id"]')

if [[ -z "$NEGOTIATION_ID" ]]; then
	echo "[ERROR] Unable to retrieve negotiation ID!"
	exit 1
else
	echo "NegotiationId: $NEGOTIATION_ID"
fi

echo "=== Waiting for contract agreement ==="
for i in {1..30}; do
	AGREEMENT=$(curl -s $HEADERS "$CONSUMER_MANAGEMENT/v2/contractnegotiations/$NEGOTIATION_ID")
	AGREEMENT_ID=$(echo "$AGREEMENT" | jq -r '.contractAgreementId // empty')
	if [[ -n "$AGREEMENT_ID" ]]; then
		echo "AgreementId: $AGREEMENT_ID"
		break
	fi
	sleep 1
done

if [[ -z "$AGREEMENT_ID" ]]; then
	echo "Błąd: nie uzyskano contractAgreementId!"
	exit 1
fi

# 9. Transfer asset
echo "=== Transfer asset ==="
TRANSFER_PAYLOAD=$(jq -n \
	--arg contract_agreement_id "$AGREEMENT_ID" \
	--arg counter_party_address_internal "$PROVIDER_PROTOCOL_INTERNAL" \
	--arg provider_connector_id "provider" \
	--arg CONSUMER_BACKEND_EDR "$CONSUMER_BACKEND_EDR" \
'{
	"@context" : { "@vocab" : "https://w3id.org/edc/v0.0.1/ns/" },
	"connectorId" : $provider_connector_id,
	"counterPartyAddress" : $counter_party_address_internal,
	"contractId" : $contract_agreement_id,
	"assetId" : "assetId",
	"protocol" : "dataspace-protocol-http",
	"transferType" : "HttpData-PULL",
	"dataDestination" : {
		"type" : "HttpProxy",
	},
	"callbackAddresses": [{ "events" : ["transfer.process.started"], "uri" : $CONSUMER_BACKEND_EDR }],
}')
TRANSFER_RES=$(curl -s -X POST $RETURN_CODE $HEADERS "${CONSUMER_MANAGEMENT}/v2/transferprocesses" -d "$TRANSFER_PAYLOAD")
if [[ $TRANSFER_RES -eq 200 ]] ; then
	echo "=== Transfer successfull ==="
	echo $TRANSFER_RES
else
	echo "[ERROR] Unable to make a transfer: $TRANSFER_RES"
	exit 1
fi
echo "=== All tests finished successfully ==="
